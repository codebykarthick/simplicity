import os
from contextlib import asynccontextmanager

from fastapi import FastAPI, Query
from fastapi.responses import FileResponse
from fastapi.staticfiles import StaticFiles

from dto.request import QueryRequest
from dto.response import QueryResponse
from rag.engine import Engine
from utils.config import CONFIG, load_config
from utils.logger import logger, setup_logger


@asynccontextmanager
async def lifespan(server: FastAPI):
    """Manual lifecycle hook to setup configuration before listening for requests.

    Args:
        server (FastAPI): The instance of FastAPI (Not used here).
    """
    load_config()
    setup_logger()
    yield

server = FastAPI(lifespan=lifespan)
engine = Engine()

# Mount frontend folder as static files
frontend_path = os.path.join(os.path.dirname(__file__), "ui")
server.mount("/static", StaticFiles(directory=frontend_path), name="static")


@server.get("/")
def serve_index() -> FileResponse:
    """Server the simple HTML UI on which user posts the query.

    Returns:
        FileResponse: Standard FastAPI response of the HTML file.
    """
    return FileResponse(os.path.join(frontend_path, "index.html"))


@server.post("/ask")
def handle_query(request: QueryRequest,
                 limit: int = Query(10, ge=1, le=25,
                                    description="Max number of abstracts to process for the query")
                 ) -> QueryResponse:
    """Endpoint to handle user query for the actual RAG flow.

    Args:
        request (QueryRequest): The query from the user to generate content on.
        limit (int): The maximum number of abstracts to process, summarise and cite in response.

    Returns:
        QueryResponse: The structured response generated by the server.
    """
    logger.info(f"Received request: {request}")
    return engine.generate_response(query=request.query, limit=limit)
